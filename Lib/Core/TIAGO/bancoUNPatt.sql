-- MySQL Script generated by MySQL Workbench
-- Sat Nov  5 15:22:57 2016
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema estartho_bdunp
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `estartho_bdunp` ;

-- -----------------------------------------------------
-- Schema estartho_bdunp
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `estartho_bdunp` DEFAULT CHARACTER SET latin1 ;
USE `estartho_bdunp` ;

-- -----------------------------------------------------
-- Table `estartho_bdunp`.`Curso`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `estartho_bdunp`.`Curso` ;

CREATE TABLE IF NOT EXISTS `estartho_bdunp`.`Curso` (
  `idCurso` INT(11) NOT NULL AUTO_INCREMENT,
  `nomeCurso` VARCHAR(45) CHARACTER SET 'latin1' NOT NULL,
  PRIMARY KEY (`idCurso`))
ENGINE = InnoDB
AUTO_INCREMENT = 2
DEFAULT CHARACTER SET = latin1
COLLATE = latin1_general_ci;

CREATE UNIQUE INDEX `nomeCurso_UNIQUE` ON `estartho_bdunp`.`Curso` (`nomeCurso` ASC);

CREATE UNIQUE INDEX `idCurso_UNIQUE` ON `estartho_bdunp`.`Curso` (`idCurso` ASC);


-- -----------------------------------------------------
-- Table `estartho_bdunp`.`Aluno`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `estartho_bdunp`.`Aluno` ;

CREATE TABLE IF NOT EXISTS `estartho_bdunp`.`Aluno` (
  `idAluno` INT(11) NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(100) CHARACTER SET 'latin1' NOT NULL,
  `matricula` CHAR(9) CHARACTER SET 'latin1' NOT NULL,
  `email` VARCHAR(50) CHARACTER SET 'latin1' NOT NULL,
  `login` VARCHAR(50) CHARACTER SET 'latin1' NOT NULL,
  `senha` VARCHAR(20) CHARACTER SET 'latin1' NOT NULL,
  `idCursoFK` INT(11) NOT NULL,
  PRIMARY KEY (`idAluno`),
  CONSTRAINT `FKCurso_Aluno`
    FOREIGN KEY (`idCursoFK`)
    REFERENCES `estartho_bdunp`.`Curso` (`idCurso`))
ENGINE = InnoDB
AUTO_INCREMENT = 2
DEFAULT CHARACTER SET = latin1
COLLATE = latin1_general_ci;

CREATE INDEX `FKCurso_Aluno` ON `estartho_bdunp`.`Aluno` (`idCursoFK` ASC);

CREATE UNIQUE INDEX `idAluno_UNIQUE` ON `estartho_bdunp`.`Aluno` (`idAluno` ASC);

CREATE UNIQUE INDEX `matricula_UNIQUE` ON `estartho_bdunp`.`Aluno` (`matricula` ASC);

CREATE UNIQUE INDEX `email_UNIQUE` ON `estartho_bdunp`.`Aluno` (`email` ASC);

CREATE UNIQUE INDEX `login_UNIQUE` ON `estartho_bdunp`.`Aluno` (`login` ASC);


-- -----------------------------------------------------
-- Table `estartho_bdunp`.`Professor`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `estartho_bdunp`.`Professor` ;

CREATE TABLE IF NOT EXISTS `estartho_bdunp`.`Professor` (
  `idProfessor` INT(11) NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(100) CHARACTER SET 'latin1' NOT NULL,
  `matricula` VARCHAR(6) CHARACTER SET 'latin1' NOT NULL,
  `email` VARCHAR(50) CHARACTER SET 'latin1' NOT NULL,
  `login` VARCHAR(50) CHARACTER SET 'latin1' NOT NULL,
  `senha` VARCHAR(20) CHARACTER SET 'latin1' NOT NULL,
  PRIMARY KEY (`idProfessor`))
ENGINE = InnoDB
AUTO_INCREMENT = 2
DEFAULT CHARACTER SET = latin1
COLLATE = latin1_general_ci;

CREATE UNIQUE INDEX `idProfessor_UNIQUE` ON `estartho_bdunp`.`Professor` (`idProfessor` ASC);

CREATE UNIQUE INDEX `matricula_UNIQUE` ON `estartho_bdunp`.`Professor` (`matricula` ASC);

CREATE UNIQUE INDEX `login_UNIQUE` ON `estartho_bdunp`.`Professor` (`login` ASC);

CREATE UNIQUE INDEX `email_UNIQUE` ON `estartho_bdunp`.`Professor` (`email` ASC);


-- -----------------------------------------------------
-- Table `estartho_bdunp`.`Agendamento`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `estartho_bdunp`.`Agendamento` ;

CREATE TABLE IF NOT EXISTS `estartho_bdunp`.`Agendamento` (
  `idAgendamento` INT(11) NOT NULL AUTO_INCREMENT,
  `motivo` VARCHAR(100) CHARACTER SET 'latin1' NOT NULL,
  `dataHora` DATETIME NOT NULL,
  `idProfessorFK` INT(11) NULL DEFAULT NULL,
  `idAlunoFK` INT(11) NULL DEFAULT NULL,
  PRIMARY KEY (`idAgendamento`),
  CONSTRAINT `FKAluno_Agendamento`
    FOREIGN KEY (`idAlunoFK`)
    REFERENCES `estartho_bdunp`.`Aluno` (`idAluno`),
  CONSTRAINT `FKProfessor_Agendamento`
    FOREIGN KEY (`idProfessorFK`)
    REFERENCES `estartho_bdunp`.`Professor` (`idProfessor`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = latin1
COLLATE = latin1_general_ci;

CREATE INDEX `FKProfessor_Agendamento` ON `estartho_bdunp`.`Agendamento` (`idProfessorFK` ASC);

CREATE INDEX `FKAluno_Agendamento` ON `estartho_bdunp`.`Agendamento` (`idAlunoFK` ASC);

CREATE UNIQUE INDEX `idAgendamento_UNIQUE` ON `estartho_bdunp`.`Agendamento` (`idAgendamento` ASC);


-- -----------------------------------------------------
-- Table `estartho_bdunp`.`LinhaPesquisa`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `estartho_bdunp`.`LinhaPesquisa` ;

CREATE TABLE IF NOT EXISTS `estartho_bdunp`.`LinhaPesquisa` (
  `idLinhaPesquisa` INT(11) NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(250) CHARACTER SET 'latin1' NOT NULL,
  `idCursoFK` INT(11) NOT NULL,
  PRIMARY KEY (`idLinhaPesquisa`),
  CONSTRAINT `FKCurso_LinhaPesquisa`
    FOREIGN KEY (`idCursoFK`)
    REFERENCES `estartho_bdunp`.`Curso` (`idCurso`))
ENGINE = InnoDB
AUTO_INCREMENT = 2
DEFAULT CHARACTER SET = latin1
COLLATE = latin1_general_ci;

CREATE INDEX `FKCurso_LinhaPesquisa` ON `estartho_bdunp`.`LinhaPesquisa` (`idCursoFK` ASC);

CREATE UNIQUE INDEX `idLinhaPesquisa_UNIQUE` ON `estartho_bdunp`.`LinhaPesquisa` (`idLinhaPesquisa` ASC);

CREATE UNIQUE INDEX `LinhaPesquisa_UNIQUE` ON `estartho_bdunp`.`LinhaPesquisa` (`nome` ASC);


-- -----------------------------------------------------
-- Table `estartho_bdunp`.`TCC`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `estartho_bdunp`.`TCC` ;

CREATE TABLE IF NOT EXISTS `estartho_bdunp`.`TCC` (
  `idTCC` INT(11) NOT NULL AUTO_INCREMENT,
  `titulo` VARCHAR(100) CHARACTER SET 'latin1' NOT NULL,
  `resumo` VARCHAR(250) CHARACTER SET 'latin1' NOT NULL,
  `statusTCC` TINYINT(1) NOT NULL COMMENT '1 - Finalizado\n2 - Pendente\n3 - Negado\n4 - Aceite',
  `objetivo` VARCHAR(100) CHARACTER SET 'latin1' NOT NULL,
  `justificativa` VARCHAR(100) CHARACTER SET 'latin1' NOT NULL,
  `TCCTipo` TINYINT(1) NOT NULL,
  `idLinhaPesquisaFK` INT(11) NOT NULL,
  PRIMARY KEY (`idTCC`),
  CONSTRAINT `FKLinhaPesquisa_TCC`
    FOREIGN KEY (`idLinhaPesquisaFK`)
    REFERENCES `estartho_bdunp`.`LinhaPesquisa` (`idLinhaPesquisa`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = latin1
COLLATE = latin1_general_ci;

CREATE INDEX `FKLinhaPesquisa_TCC` ON `estartho_bdunp`.`TCC` (`idLinhaPesquisaFK` ASC);

CREATE UNIQUE INDEX `idTCC_UNIQUE` ON `estartho_bdunp`.`TCC` (`idTCC` ASC);

CREATE UNIQUE INDEX `titulo_UNIQUE` ON `estartho_bdunp`.`TCC` (`titulo` ASC);


-- -----------------------------------------------------
-- Table `estartho_bdunp`.`Arquivo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `estartho_bdunp`.`Arquivo` ;

CREATE TABLE IF NOT EXISTS `estartho_bdunp`.`Arquivo` (
  `idArquivo` INT(11) NOT NULL AUTO_INCREMENT,
  `link` VARCHAR(250) CHARACTER SET 'latin1' NOT NULL,
  `idTCCFK` INT(11) NOT NULL,
  `versao` VARCHAR(45) NOT NULL COMMENT 'TCC 1\nTCC 2\nBanca\nFinal com correções\n',
  PRIMARY KEY (`idArquivo`),
  CONSTRAINT `FKTCC_Arquivo`
    FOREIGN KEY (`idTCCFK`)
    REFERENCES `estartho_bdunp`.`TCC` (`idTCC`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = latin1
COLLATE = latin1_general_ci;

CREATE INDEX `FKTCC_Arquivo` ON `estartho_bdunp`.`Arquivo` (`idTCCFK` ASC);

CREATE UNIQUE INDEX `idArquivo_UNIQUE` ON `estartho_bdunp`.`Arquivo` (`idArquivo` ASC);


-- -----------------------------------------------------
-- Table `estartho_bdunp`.`Atividade`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `estartho_bdunp`.`Atividade` ;

CREATE TABLE IF NOT EXISTS `estartho_bdunp`.`Atividade` (
  `idAtividade` INT(11) NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(50) CHARACTER SET 'latin1' NOT NULL,
  `mes` DATE NOT NULL,
  `descricao` VARCHAR(250) CHARACTER SET 'latin1' NOT NULL,
  `idTCCFK` INT(11) NOT NULL,
  PRIMARY KEY (`idAtividade`),
  CONSTRAINT `FKTCC_Atividade`
    FOREIGN KEY (`idTCCFK`)
    REFERENCES `estartho_bdunp`.`TCC` (`idTCC`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = latin1
COLLATE = latin1_general_ci;

CREATE INDEX `FKTCC_Atividade` ON `estartho_bdunp`.`Atividade` (`idTCCFK` ASC);

CREATE UNIQUE INDEX `idAtividade_UNIQUE` ON `estartho_bdunp`.`Atividade` (`idAtividade` ASC);


-- -----------------------------------------------------
-- Table `estartho_bdunp`.`Cronograma`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `estartho_bdunp`.`Cronograma` ;

CREATE TABLE IF NOT EXISTS `estartho_bdunp`.`Cronograma` (
  `idCronograma` INT(11) NOT NULL AUTO_INCREMENT,
  `oque` VARCHAR(100) CHARACTER SET 'latin1' NOT NULL,
  `porque` VARCHAR(100) CHARACTER SET 'latin1' NOT NULL,
  `onde` VARCHAR(100) CHARACTER SET 'latin1' NOT NULL,
  `quando` VARCHAR(100) CHARACTER SET 'latin1' NOT NULL,
  `quem` VARCHAR(100) CHARACTER SET 'latin1' NOT NULL,
  `como` VARCHAR(100) CHARACTER SET 'latin1' NOT NULL,
  `quanto` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idCronograma`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = latin1
COLLATE = latin1_general_ci;

CREATE UNIQUE INDEX `idCronograma_UNIQUE` ON `estartho_bdunp`.`Cronograma` (`idCronograma` ASC);


-- -----------------------------------------------------
-- Table `estartho_bdunp`.`AtividadesCronograma`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `estartho_bdunp`.`AtividadesCronograma` ;

CREATE TABLE IF NOT EXISTS `estartho_bdunp`.`AtividadesCronograma` (
  `idAtividadesCronograma` INT(11) NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(100) CHARACTER SET 'latin1' NOT NULL,
  `idCronogramaFK` INT(11) NOT NULL,
  `idTCCFK` INT(11) NOT NULL,
  PRIMARY KEY (`idAtividadesCronograma`),
  CONSTRAINT `FKCronograma_AtividadesCronograma`
    FOREIGN KEY (`idCronogramaFK`)
    REFERENCES `estartho_bdunp`.`Cronograma` (`idCronograma`),
  CONSTRAINT `FKTCC_AtividadesCronograma`
    FOREIGN KEY (`idTCCFK`)
    REFERENCES `estartho_bdunp`.`TCC` (`idTCC`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = latin1
COLLATE = latin1_general_ci;

CREATE INDEX `FKCronograma_AtividadesCronograma` ON `estartho_bdunp`.`AtividadesCronograma` (`idCronogramaFK` ASC);

CREATE INDEX `FKTCC_AtividadesCronograma` ON `estartho_bdunp`.`AtividadesCronograma` (`idTCCFK` ASC);

CREATE UNIQUE INDEX `idAtividadesCronograma_UNIQUE` ON `estartho_bdunp`.`AtividadesCronograma` (`idAtividadesCronograma` ASC);


-- -----------------------------------------------------
-- Table `estartho_bdunp`.`Componentes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `estartho_bdunp`.`Componentes` ;

CREATE TABLE IF NOT EXISTS `estartho_bdunp`.`Componentes` (
  `idProfessorFK` INT(11) NOT NULL,
  `idAlunoFK1` INT(11) NOT NULL,
  `idAlunoFK2` INT(11) NULL DEFAULT NULL,
  `idTCCFK` INT(11) NOT NULL,
  CONSTRAINT `FKAluno_Componente`
    FOREIGN KEY (`idAlunoFK1`)
    REFERENCES `estartho_bdunp`.`Aluno` (`idAluno`),
  CONSTRAINT `FKAluno_Componente_2`
    FOREIGN KEY (`idAlunoFK2`)
    REFERENCES `estartho_bdunp`.`Aluno` (`idAluno`),
  CONSTRAINT `FKProfessor_Componente`
    FOREIGN KEY (`idProfessorFK`)
    REFERENCES `estartho_bdunp`.`Professor` (`idProfessor`),
  CONSTRAINT `FKTCC_Componente`
    FOREIGN KEY (`idTCCFK`)
    REFERENCES `estartho_bdunp`.`TCC` (`idTCC`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = latin1
COLLATE = latin1_general_ci;

CREATE INDEX `FKProfessor_Componente` ON `estartho_bdunp`.`Componentes` (`idProfessorFK` ASC);

CREATE INDEX `FKAluno_Componente` ON `estartho_bdunp`.`Componentes` (`idAlunoFK1` ASC);

CREATE INDEX `FKAluno_Componente_2` ON `estartho_bdunp`.`Componentes` (`idAlunoFK2` ASC);

CREATE INDEX `FKTCC_Componente` ON `estartho_bdunp`.`Componentes` (`idTCCFK` ASC);


-- -----------------------------------------------------
-- Table `estartho_bdunp`.`Unidade`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `estartho_bdunp`.`Unidade` ;

CREATE TABLE IF NOT EXISTS `estartho_bdunp`.`Unidade` (
  `idUnidade` INT NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idUnidade`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `idUnidade_UNIQUE` ON `estartho_bdunp`.`Unidade` (`idUnidade` ASC);


-- -----------------------------------------------------
-- Table `estartho_bdunp`.`Sala`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `estartho_bdunp`.`Sala` ;

CREATE TABLE IF NOT EXISTS `estartho_bdunp`.`Sala` (
  `idSala` INT(11) NOT NULL AUTO_INCREMENT,
  `setor` VARCHAR(10) CHARACTER SET 'latin1' NOT NULL,
  `capacidade` INT NOT NULL,
  `idUnidadeFK` INT NOT NULL,
  PRIMARY KEY (`idSala`),
  CONSTRAINT `fk_Sala_Unidade`
    FOREIGN KEY (`idUnidadeFK`)
    REFERENCES `estartho_bdunp`.`Unidade` (`idUnidade`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = latin1
COLLATE = latin1_general_ci;

CREATE INDEX `fk_Sala_Unidade1_idx` ON `estartho_bdunp`.`Sala` (`idUnidadeFK` ASC);

CREATE UNIQUE INDEX `idSala_UNIQUE` ON `estartho_bdunp`.`Sala` (`idSala` ASC);


-- -----------------------------------------------------
-- Table `estartho_bdunp`.`Reserva`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `estartho_bdunp`.`Reserva` ;

CREATE TABLE IF NOT EXISTS `estartho_bdunp`.`Reserva` (
  `idReserva` INT(11) NOT NULL AUTO_INCREMENT,
  `dataHora` DATETIME NOT NULL,
  `idProfessorFK` INT(11) NOT NULL,
  `idSalaFK` INT(11) NOT NULL,
  PRIMARY KEY (`idReserva`),
  CONSTRAINT `FKProfessor_Reserva`
    FOREIGN KEY (`idProfessorFK`)
    REFERENCES `estartho_bdunp`.`Professor` (`idProfessor`),
  CONSTRAINT `FKSalaAula_Reserva`
    FOREIGN KEY (`idSalaFK`)
    REFERENCES `estartho_bdunp`.`Sala` (`idSala`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = latin1
COLLATE = latin1_general_ci;

CREATE INDEX `FKProfessor_Reserva` ON `estartho_bdunp`.`Reserva` (`idProfessorFK` ASC);

CREATE INDEX `FKSalaAula_Reserva` ON `estartho_bdunp`.`Reserva` (`idSalaFK` ASC);

CREATE UNIQUE INDEX `idReserva_UNIQUE` ON `estartho_bdunp`.`Reserva` (`idReserva` ASC);


-- -----------------------------------------------------
-- Table `estartho_bdunp`.`Defesa`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `estartho_bdunp`.`Defesa` ;

CREATE TABLE IF NOT EXISTS `estartho_bdunp`.`Defesa` (
  `idDefesa` INT(11) NOT NULL AUTO_INCREMENT,
  `data` DATE NOT NULL,
  `idTCCFK` INT(11) NOT NULL,
  `idReservaFK` INT(11) NULL DEFAULT NULL,
  PRIMARY KEY (`idDefesa`),
  CONSTRAINT `FKReserva_Defesa`
    FOREIGN KEY (`idReservaFK`)
    REFERENCES `estartho_bdunp`.`Reserva` (`idReserva`),
  CONSTRAINT `FKTCC_Defesa`
    FOREIGN KEY (`idTCCFK`)
    REFERENCES `estartho_bdunp`.`TCC` (`idTCC`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = latin1
COLLATE = latin1_general_ci;

CREATE INDEX `FKTCC_Defesa` ON `estartho_bdunp`.`Defesa` (`idTCCFK` ASC);

CREATE INDEX `FKReserva_Defesa` ON `estartho_bdunp`.`Defesa` (`idReservaFK` ASC);

CREATE UNIQUE INDEX `idDefesa_UNIQUE` ON `estartho_bdunp`.`Defesa` (`idDefesa` ASC);


-- -----------------------------------------------------
-- Table `estartho_bdunp`.`Erros`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `estartho_bdunp`.`Erros` ;

CREATE TABLE IF NOT EXISTS `estartho_bdunp`.`Erros` (
  `idErros` INT(11) NOT NULL AUTO_INCREMENT,
  `nomeErro` VARCHAR(50) CHARACTER SET 'latin1' NOT NULL,
  `categoria` VARCHAR(100) CHARACTER SET 'latin1' NOT NULL,
  PRIMARY KEY (`idErros`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = latin1
COLLATE = latin1_general_ci;

CREATE UNIQUE INDEX `idErros_UNIQUE` ON `estartho_bdunp`.`Erros` (`idErros` ASC);


-- -----------------------------------------------------
-- Table `estartho_bdunp`.`ErrosTCC`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `estartho_bdunp`.`ErrosTCC` ;

CREATE TABLE IF NOT EXISTS `estartho_bdunp`.`ErrosTCC` (
  `idErrosTCC` INT(11) NOT NULL AUTO_INCREMENT,
  `idTCCFK` INT(11) NOT NULL,
  `idErrosFK` INT(11) NOT NULL,
  PRIMARY KEY (`idErrosTCC`),
  CONSTRAINT `FKErros_ErrosTCC`
    FOREIGN KEY (`idErrosFK`)
    REFERENCES `estartho_bdunp`.`Erros` (`idErros`),
  CONSTRAINT `FKTCC_ErrosTCC`
    FOREIGN KEY (`idTCCFK`)
    REFERENCES `estartho_bdunp`.`TCC` (`idTCC`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = latin1
COLLATE = latin1_general_ci;

CREATE INDEX `FKTCC_ErrosTCC` ON `estartho_bdunp`.`ErrosTCC` (`idTCCFK` ASC);

CREATE INDEX `FKErros_ErrosTCC` ON `estartho_bdunp`.`ErrosTCC` (`idErrosFK` ASC);

CREATE UNIQUE INDEX `idErrosTCC_UNIQUE` ON `estartho_bdunp`.`ErrosTCC` (`idErrosTCC` ASC);


-- -----------------------------------------------------
-- Table `estartho_bdunp`.`Evento`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `estartho_bdunp`.`Evento` ;

CREATE TABLE IF NOT EXISTS `estartho_bdunp`.`Evento` (
  `idEvento` INT(11) NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(50) CHARACTER SET 'latin1' NOT NULL,
  `dataHora` DATETIME NOT NULL,
  `local` VARCHAR(100) CHARACTER SET 'latin1' NOT NULL,
  `idProfessorFK` INT(11) NOT NULL,
  `idCursoFK` INT(11) NOT NULL,
  PRIMARY KEY (`idEvento`),
  CONSTRAINT `FKCurso_Evento`
    FOREIGN KEY (`idCursoFK`)
    REFERENCES `estartho_bdunp`.`Curso` (`idCurso`),
  CONSTRAINT `FKProfessor_Evento`
    FOREIGN KEY (`idProfessorFK`)
    REFERENCES `estartho_bdunp`.`Professor` (`idProfessor`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = latin1
COLLATE = latin1_general_ci;

CREATE INDEX `FKProfessor_Evento` ON `estartho_bdunp`.`Evento` (`idProfessorFK` ASC);

CREATE INDEX `FKCurso_Evento` ON `estartho_bdunp`.`Evento` (`idCursoFK` ASC);

CREATE UNIQUE INDEX `idEvento_UNIQUE` ON `estartho_bdunp`.`Evento` (`idEvento` ASC);

CREATE UNIQUE INDEX `nome_UNIQUE` ON `estartho_bdunp`.`Evento` (`nome` ASC);


-- -----------------------------------------------------
-- Table `estartho_bdunp`.`Relatorio`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `estartho_bdunp`.`Relatorio` ;

CREATE TABLE IF NOT EXISTS `estartho_bdunp`.`Relatorio` (
  `idRelatorio` INT(11) NOT NULL AUTO_INCREMENT,
  `apresentacaoNota` FLOAT NOT NULL,
  `fundamentacaoNota` FLOAT NOT NULL,
  `desenvolvimentoNota` FLOAT NOT NULL,
  `resultadosNota` FLOAT NOT NULL,
  `notaFinal` FLOAT NOT NULL,
  `TipoRelatorio` VARCHAR(50) CHARACTER SET 'latin1' NOT NULL,
  `apresentacaoComentario` VARCHAR(250) CHARACTER SET 'latin1' NULL,
  `fundamentacaoComentario` VARCHAR(250) CHARACTER SET 'latin1' NULL,
  `desenvolvimentoComentario` VARCHAR(250) CHARACTER SET 'latin1' NULL,
  `resultadosComentario` VARCHAR(250) CHARACTER SET 'latin1' NULL,
  `idTCCFK` INT(11) NOT NULL,
  PRIMARY KEY (`idRelatorio`),
  CONSTRAINT `FKTCC_Relatorio`
    FOREIGN KEY (`idTCCFK`)
    REFERENCES `estartho_bdunp`.`TCC` (`idTCC`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = latin1
COLLATE = latin1_general_ci;

CREATE INDEX `FKTCC_Relatorio` ON `estartho_bdunp`.`Relatorio` (`idTCCFK` ASC);

CREATE UNIQUE INDEX `idRelatorio_UNIQUE` ON `estartho_bdunp`.`Relatorio` (`idRelatorio` ASC);


-- -----------------------------------------------------
-- Table `estartho_bdunp`.`AlunoDefesa`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `estartho_bdunp`.`AlunoDefesa` ;

CREATE TABLE IF NOT EXISTS `estartho_bdunp`.`AlunoDefesa` (
  `notaPostura` FLOAT NOT NULL,
  `notaComunicacao` FLOAT NOT NULL,
  `notaClareza` FLOAT NOT NULL,
  `notaDominio` FLOAT NOT NULL,
  `idAluno` INT(11) NOT NULL,
  `notaFinal` FLOAT NOT NULL,
  `posturaComentario` VARCHAR(200) NULL,
  `comunicacaoComentario` VARCHAR(45) NULL,
  `clarezaComentario` VARCHAR(45) NULL,
  `dominioComentario` VARCHAR(45) NULL,
  `idDefesa` INT(11) NOT NULL,
  CONSTRAINT `fk_AlunoDefesa_Aluno`
    FOREIGN KEY (`idAluno`)
    REFERENCES `estartho_bdunp`.`Aluno` (`idAluno`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_AlunoDefesa_Defesa`
    FOREIGN KEY (`idDefesa`)
    REFERENCES `estartho_bdunp`.`Defesa` (`idDefesa`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_AlunoDefesa_Aluno1_idx` ON `estartho_bdunp`.`AlunoDefesa` (`idAluno` ASC);

CREATE INDEX `fk_AlunoDefesa_Defesa1_idx` ON `estartho_bdunp`.`AlunoDefesa` (`idDefesa` ASC);

USE `estartho_bdunp` ;



-- -----------------------------------------------------
-- ------------------PROCEDURES-------------------------
-- -----------------------------------------------------

-- -----------------------------------------------------
-- procedure sp_inserirAluno
-- -----------------------------------------------------

USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_inserirAluno`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_inserirAluno`(nome varchar(100), matricula char(9), email varchar(50), login varchar(50), senha varchar(20), idCursoFK integer(11))
BEGIN
	INSERT INTO `estartho_bdunp`.`Aluno`
(`nome`,
`matricula`,
`email`,
`login`,
`senha`,
`idCursoFK`)
VALUES
(nome, matricula, email, login, senha, idCursoFK);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_alterarAluno
-- -----------------------------------------------------

USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_alterarAluno`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_alterarAluno`(idAluno integer(11) ,nome varchar(100), matricula char(9), email varchar(50), login varchar(50), senha varchar(20), idCursoFK integer(11))
BEGIN
  UPDATE `estartho_bdunp`.`Aluno`
SET
`nome` =nome,
`matricula` = matricula,
`email` = email,
`login` = login,
`senha` = senha,
`idCursoFK` = idCursoFK
WHERE `estartho_bdunp`.`Aluno`.`idAluno` = idAluno;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_deletarAluno
-- -----------------------------------------------------

USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_deletarAluno`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_deletarAluno`(idAluno integer(11))
BEGIN
DELETE FROM 
WHERE `estartho_bdunp`.`Aluno`.`idAluno` = idAluno;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_listarAluno
-- -----------------------------------------------------

USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_listarAluno`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_listarAluno`()
BEGIN
SELECT * FROMAluno;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_buscarAlunoID
-- -----------------------------------------------------

USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_buscarAlunoID`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_buscarAlunoID`(idAluno integer(11))
BEGIN
SELECT * FROMAluno as A where A.idAluno = idAluno;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_buscarAlunoMatricula
-- -----------------------------------------------------

USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_buscarAlunoMatricula`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_buscarAlunoMatricula`(matricula char(9))
BEGIN
SELECT * FROMAluno where matricula = matricula;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_inserirProfessor
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_inserirProfessor`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_inserirProfessor`(nome varchar(100), matricula char(6), email varchar(50), login varchar(50), senha varchar(20),)
BEGIN
  INSERT INTO `estartho_bdunp`.`Professor`
(`nome`,
`matricula`,
`email`,
`login`,
`senha`
)
VALUES
(nome, matricula, email, login, senha);
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_alterarprofessor
-- ------------------------------------------------------

USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_alterarProfessor`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_alterarProfessor` (idProfessor integer(11), nome varchar(100), matricula integer(6), email varchar(50), login varchar(50), senha varchar(20))
BEGIN
  UPDATE `estartho_bdunp`.`Professor`
    SET 
`nome`= nome,
`matricula`= matricula,
`email`= email,
`login`=login,
`senha`= senha 
WHERE `estartho_bdunp`.`Professor`.`idProfessor`=idProfessor;
END$$

DELIMITER ; 

-- ------------------------------------------------------
-- procedure sp_deletarProfessor
-- ------------------------------------------------------

USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_deletarProfessor`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_deletarProfessor`(idProfessor integer(11))
BEGIN
DELETE FROM `estartho_bdunp`.`Professor`
WHERE `estartho_bdunp`.`Professor`.`idProfessor` = idProfessor;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_listarprofessor
-- ------------------------------------------------------

USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_listarProfessor`;

DELIMITER $$
USE `estartho_bdunp`$$

CREATE PROCEDURE `sp_listarProfessor`()
BEGIN
SELECT * FROM`estartho_bdunp`.`Professor`;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_inserirCurso
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_inserirCurso`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_inserirCurso`(nomeCurso varchar(45))
BEGIN
  INSERT INTO `estartho_bdunp`.`Curso`
(`nomeCurso`)
VALUES
(nomeCurso);
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_aletrarCurso
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_alterarCurso`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_alterarCurso` (idCurso varchar(11), nomeCurso varchar(45))
BEGIN
  UPDATE `estartho_bdunp`.`Curso`
    SET 
`nomeCurso`= nomeCurso 
WHERE `estartho_bdunp`.`Curso`.`idCurso`=idCurso;
END$$

DELIMITER ; 

-- ------------------------------------------------------
-- procedure sp_deletarCurso
-- ------------------------------------------------------

USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_deletarCurso`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_deletarCurso`(idCurso integer(11))
BEGIN
DELETE FROM `estartho_bdunp`.`Curso`
WHERE `estartho_bdunp`.`Curso`.`idCurso` = idCurso;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_listarCurso
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_listarCurso`;

DELIMITER $$
USE `estartho_bdunp`$$

CREATE PROCEDURE `sp_listarCurso`()
BEGIN
SELECT * FROM`estartho_bdunp`.`Curso`;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_inserirAgendamento
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_inserirAgendamento`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_inserirAgendamento`(motivo varchar(100), dataHora DATETIME, idProfessorFK integer(11), idAlunoFK integer(11))
BEGIN
  INSERT INTO `estartho_bdunp`.`Agendamento`
(`motivo`,
`dataHora`,
`idProfessorFK`,
`idAlunoFK`
)
VALUES
(motivo, dataHora, idProfessorFK, idAlunoFK);
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_alterarAgendamento
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_alterarAgendamento`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_alterarAgendamento` (idAgendamento integer(11), motivo varchar(100), dataHora DATETIME, idProfessorFK integer(11), idAlunoFK integer(11))
BEGIN
  UPDATE `estartho_bdunp`.`Agendamento`
    SET 
`motivo`= motivo, 
`dataHora`= dataHora,
`idProfessorFK`= idProfessorFK,
`idAlunoFK`= idAlunoFK

WHERE `estartho_bdunp`.`Agendamento`.`idAgendamento`=idAgendamento;
END$$

DELIMITER ; 

-- ------------------------------------------------------
-- procedure sp_deletarAgendamento
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_deletarAgendamento`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_deletarAgendamento`(idAgendamento integer(11))
BEGIN
DELETE FROM `estartho_bdunp`.`Agendamento`
WHERE `estartho_bdunp`.`Agendamento`.`idAgendamento` = idAgendamento;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_listarAgendamento
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_listarAgendamento`;

DELIMITER $$
USE `estartho_bdunp`$$

CREATE PROCEDURE `sp_listarAgendamento`()
BEGIN
SELECT * FROM`estartho_bdunp`.`Agendamento`;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_inserirLinhaPesquisa
-- ------------------------------------------------------

USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_inserirLinhaPesquisa`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_inserirLinhaPesquisa`(nome varchar(250), idCursoFK integer(11))
BEGIN
  INSERT INTO `estartho_bdunp`.`LinhaPesquisa`
(`nome`,
`idCursoFK`
)
VALUES
(nome, ìdCursoFK);
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_alterarLinhaPesquisa
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_alterarProfessor`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_alterarLinhaPesquisa` (idLinhaPesquisa integer(11), nome varchar(250), idCursoFK integer(11))
BEGIN
  UPDATE `estartho_bdunp`.`LinhaPesquisa`
    SET 
`nome`= nome,
`idCursoFK`= idCursoFK

WHERE `estartho_bdunp`.`LinhaPesquisa`.`idLinhaPesquisa`= idLinhaPesquisa;
END$$

DELIMITER ; 


-- ------------------------------------------------------
-- procedure sp_deletarLinhaPesquisa
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_deletarLinhaPesquisa`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_deletarLinhaPesquisa`(idLinhaPesquisa integer(11))
BEGIN
DELETE FROM `estartho_bdunp`.`LinhaPesquisa`
WHERE `estartho_bdunp`.`LinhaPesquisa`.`idLinhaPesquisa` = idLinhaPesquisa;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_listarLinhaPesquisa
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_listarLinhaPesquisa`;

DELIMITER $$
USE `estartho_bdunp`$$

CREATE PROCEDURE `sp_listarLinhaPesquisa`()
BEGIN
SELECT * FROM`estartho_bdunp`.`LinhaPesquisa`;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_inserirTCC
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_inserirTCC`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_inserirTCC`(titulo varchar(100), resumo varchar(250), statusTCC tinyint(1), objetivo varchar(100), justificativa varchar(100), TCCTipo tinyint(1), idLinhaPesquisaFK integer(11))
BEGIN
  INSERT INTO `estartho_bdunp`.`TCC`
(`titulo`,
`resumo`,
`statusTCC`,
`objetivo`,
`justificativa`,
`TCCTipo`,
`idLinhaPesquisaFK`
)
VALUES
(titulo, resumo, statusTCC, objetivo, justificativa, TCCTipo, idLinhaPesquisaFK);
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_alterarTCC
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_alterarTCC`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_alterarTCC` (idTCC integer(11), titulo varchar(100), resumo varchar(250), statusTCC tinyint(1), objetivo varchar(100), justificativa varchar(100), TCCTipo tinyint(1), idLinhaPesquisaFK integer(11)) 
BEGIN
  UPDATE `estartho_bdunp`.`TCC`
    SET 
`titulo` = titulo,
`resumo`= resumo,
`statusTCC`= statusTCC,
`objetivo`= objetivo,
`justificativa`= justificativa, 
`TCCTipo`= TCCTipo,
`idLinhaPesquisaFK`= idLinhaPesquisaFK
WHERE `estartho_bdunp`.`TCC`.`idTCC`=idTCC;
END$$

DELIMITER ; 

-- ------------------------------------------------------
-- procedure sp_deletarTCC
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_deletarTCC`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_deletarTCC`(idTCC integer(11))
BEGIN
DELETE FROM `estartho_bdunp`.`TCC`
WHERE `estartho_bdunp`.`TCC`.`idTCC` = idTCC;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_listarTCC
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_listarTCC`;

DELIMITER $$
USE `estartho_bdunp`$$

CREATE PROCEDURE `sp_listarTCC`()
BEGIN
SELECT * FROM `estartho_bdunp`.`TCC`;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_inserirArquivo
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_inserirArquivo`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_inserirArquivo`(link varchar(250), idTCCFK integer(11), versao varchar(45))
BEGIN
  INSERT INTO `estartho_bdunp`.`Arquivo`
(`link`,
`idTCCFK`,
`versao`
)
VALUES
(link, idTCCFK, versao);
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_alterarArquivo
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_alterarArquivo`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_alterarArquivo` (idArquivo integer(11), link varchar(250), idTCCFK integer(11), versao varchar(45))
BEGIN
  UPDATE `estartho_bdunp`.`Arquivo`
    SET 
`link`= link,
`idTCCFK`= idTCCFK,
`versao`= versao
WHERE `estartho_bdunp`.`Arquivo`.`idArquivo`=idArquivo;
END$$

DELIMITER ; 

-- ------------------------------------------------------
-- procedure sp_deletarArquivo
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_deletarArquivo`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_deletarArquivo`(idArquivo integer(11))
BEGIN
DELETE FROM `estartho_bdunp`.`Arquivo`
WHERE `estartho_bdunp`.`Arquivo`.`idArquivo` = idArquivo;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_listarArquivo
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_listarArquivo`;

DELIMITER $$
USE `estartho_bdunp`$$

CREATE PROCEDURE `sp_listarArquivo`()
BEGIN
SELECT * FROM `estartho_bdunp`.`Arquivo`;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_inserirAtividade
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_inserirAtividade`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_inserirAtividade` (nome varchar(50), mes date, descricao varchar(250), idTCCFK integer(11))
BEGIN
  INSERT INTO `estartho_bdunp`.`Atividade`
(`nome`,
`mes`,
`descricao`,
`idTCCFK`
)
VALUES
(nome, mes, descricao, idTCCFK);
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_alterarAtividade
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_alterarAtividade`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_alterarAtividade` (idAtividade integer(11), nome varchar(50), mes date, descricao varchar(250), idTCCFK integer(11))
BEGIN
  UPDATE `estartho_bdunp`.`Atividade`
    SET 
`nome`= nome,
`mes`= mes,
`descricao`= descricao,
`idTCCFK`= idTCCFK 
WHERE `estartho_bdunp`.`Atividade`.`idAtividade`=idAtividade;
END$$

DELIMITER ; 

-- ------------------------------------------------------
-- procedure sp_deletarAtividade
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_deletarAtividade`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_deletarAtividade`(idAtividade integer(11))
BEGIN
DELETE FROM `estartho_bdunp`.`Atividade`
WHERE `estartho_bdunp`.`Atividade`.`idAtividade` = idAtividade;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_litarAtividade
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_listarAtividade`;

DELIMITER $$
USE `estartho_bdunp`$$

CREATE PROCEDURE `sp_listarAtividade`()
BEGIN
SELECT * FROM `estartho_bdunp`.`Atividade`;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_inserirCronograma
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_inserirCronograma`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_inserirCronograma`(oque varchar(100), porque varchar(100), onde varchar(100), quando varchar(100), como varchar(100), quanto varchar(45))
BEGIN
  INSERT INTO `estartho_bdunp`.`Cronograma`
(`oque`,
`porque`,
`onde`,
`quando`,
`como`,
`quanto`
)
VALUES
(oque, porque, onde, quando, como, quanto);
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_alterarCronograma
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_alterarCronograma`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_alterarCronograma` (idCronograma integer(11), oque varchar(100), porque varchar(100), onde varchar(100), quando varchar(100), como varchar(100), quanto varchar(45))
BEGIN
  UPDATE `estartho_bdunp`.`Cronograma`
    SET 
`oque`= oque,
`porque`= porque,
`onde`= onde,
`quando`= quando,
`como`= como,
`quanto`= quanto
WHERE `estartho_bdunp`.`Cronograma`.`idCronograma`=idCronograma;
END$$

DELIMITER ; 

-- ------------------------------------------------------
-- procedure sp_deletarCronograma
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_deletarCronograma`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_deletarCronograma`(idCronograma integer(11))
BEGIN
DELETE FROM `estartho_bdunp`.`Cronograma`
WHERE `estartho_bdunp`.`Cronograma`.`idCronograma` = idCronograma;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_listarCronograma
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_listarCronograma`;

DELIMITER $$
USE `estartho_bdunp`$$

CREATE PROCEDURE `sp_listarCronograma`()
BEGIN
SELECT * FROM `estartho_bdunp`.`Cronograma`;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_inserirAtividadesCronograma
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_inserirAtividadesCronograma`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_inserirAtividadesCronograma`(nome varchar(100), idCronogramaFK integer(11), idTCCFK integer(11))
BEGIN
  INSERT INTO `estartho_bdunp`.`AtividadesCronograma`
(`nome`,
`idCronogramaFK`,
`idTCCFK`
)
VALUES
(nome, idCronogramaFK, idTCCFK);
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_alterarAtividadesCronograma
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_alterarAtividadesCronograma`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_alterarAtividadesCronograma` (idAtividadesCronograma integer(11), nome varchar(100), idCronogramaFK integer(11), idTCCFK integer(11))
BEGIN
  UPDATE `estartho_bdunp`.`AtividadesCronograma`
    SET 
`nome`= nome,
`idCronogramaFK`= idCronogramaFK,
`idTCCFK`= idTCCFK
WHERE `estartho_bdunp`.`AtividadesCronograma`.`idAtividadesCronograma`=idAtividadesCronograma;
END$$

DELIMITER ; 

-- ------------------------------------------------------
-- procedure sp_deletarAtividadesCronograma
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_deletarAtividadesCronograma`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_deletarAtividadesCronograma`(idAtividadesCronograma integer(11))
BEGIN
DELETE FROM `estartho_bdunp`.`Professor`
WHERE `estartho_bdunp`.`AtividadesCronograma`.`idAtividadesCronograma` = idAtividadesCronograma;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_listarAtividadesCronograma
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_listarAtividadesCronograma`;

DELIMITER $$
USE `estartho_bdunp`$$

CREATE PROCEDURE `sp_listarAtividadesCronograma`()
BEGIN
SELECT * FROM `estartho_bdunp`.`AtividadesCronograma`;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_inserirComponentes
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_inserirComponentes`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_inserirComponentes`(idProfessorFK integer(11), idAlunoFK1 integer(11), idAlunoFK2 integer(11), idTCCFK integer(11))
BEGIN
  INSERT INTO `estartho_bdunp`.`Componentes`
(`idProfessorFK`,
`idAlunoFK1`,
`idAlunoFK2`,
`idTCCFK`
)
VALUES
(idProfessorFK, idAlunoFK1, idAlunoFK2, idTCCFK);
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_alterarComponentes
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_alterarComponentes`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_alterarComponentes` (idTCCFK integer(11), idProfessorFK integer(11), idAlunoFK1 integer(11), idAlunoFK2 integer(11))
BEGIN
  UPDATE `estartho_bdunp`.`Componentes`
    SET 
`idProfessorFK` = idProfessorFK,
`idAlunoFK1`= idAlunoFK1,
`idAlunoFK2`= idAlunoFK2,
`idTCCFK` = idTCCFK
WHERE `estartho_bdunp`.`Componentes`.`idTCCFK`=idTCCFK;
END$$

DELIMITER ; 

-- ------------------------------------------------------
-- procedure sp_deletarComponentes 
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_deletarComponentes`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_deletarComponentes`(idTCCFK integer(11))
BEGIN
DELETE FROM `estartho_bdunp`.`Componentes`
WHERE `estartho_bdunp`.`Componentes`.`idTCCFK` = idTCCFK;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_listarComponentes
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_listarComponentes`;

DELIMITER $$
USE `estartho_bdunp`$$

CREATE PROCEDURE `sp_listarComponentes`()
BEGIN
SELECT * FROM `estartho_bdunp`.`Componentes`;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_inserirUnidade
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_inserirUnidade`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_inserirUnidade`(nome varchar(45))
BEGIN
  INSERT INTO `estartho_bdunp`.`Unidade`
(`nome`,
)
VALUES
(nome);
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_alterarUnidade
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_alterarUnidade`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_alterarUnidade` (idUnidade integer(45), nome varchar(45))
BEGIN
  UPDATE `estartho_bdunp`.`Unidade`
    SET 
`nome`= nome
WHERE `estartho_bdunp`.`Unidade`.`idUnidade`=idUnidade;
END$$

DELIMITER ; 

-- ------------------------------------------------------
-- procedure sp_deletarUnidade
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_deletarUnidade`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_deletarUnidade`(idUnidade integer(11))
BEGIN
DELETE FROM `estartho_bdunp`.`Unidade`
WHERE `estartho_bdunp`.`Unidade`.`idUnidade` = idUnidade;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_listarUnidade
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_listarUnidade`;

DELIMITER $$
USE `estartho_bdunp`$$

CREATE PROCEDURE `sp_listarUnidade`()
BEGIN
SELECT * FROM `estartho_bdunp`.`Unidade`;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_inserirSala
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_inserirSala`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_inserirSala`(setor varchar(10), capacidade integer, idUnidadeFK integer)
BEGIN
  INSERT INTO `estartho_bdunp`.`Sala`
(`setor`,
`capacidade`,
`idUnidadeFK`
)
VALUES
(setor, capacidade, idUnidadeFK);
END$$

DELIMITER ;


-- ------------------------------------------------------
-- procedure sp_alterarSala
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_alterarSala`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_alterarSala` (idSala integer(11), setor varchar(10), capacidade integer, idUnidadeFK integer)
BEGIN
  UPDATE `estartho_bdunp`.`Sala`
    SET 
`setor`= setor,
`capacidade`= capacidade,
`idUnidadeFK`= idUnidadeFK
WHERE `estartho_bdunp`.`Sala`.`idSala`=idSala;
END$$

DELIMITER ; 

-- ------------------------------------------------------
-- procedure sp_deletarSala
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_deletarSala`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_deletarSala`(idSala integer(11))
BEGIN
DELETE FROM `estartho_bdunp`.`Sala`
WHERE `estartho_bdunp`.`Sala`.`idSala` = idSala;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_listarSala
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_listarSala`;

DELIMITER $$
USE `estartho_bdunp`$$

CREATE PROCEDURE `sp_listarSala`()
BEGIN
SELECT * FROM `estartho_bdunp`.`Sala`;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_inserirReserva
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_inserirReserva`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_inserirReserva`(dataHora datetime, idProfessorFK integer(11), idSalaFK integer(11))
BEGIN
  INSERT INTO `estartho_bdunp`.`Reserva`
(`dataHora`,
`idProfessorFK`,
`idSalaFK`
)
VALUES
(dataHora, idProfessorFK, idSalaFK);
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_alterarReserva
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_alterarReserva`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_alterarReserva` (idReserva integer(11), dataHora datetime, idProfessorFK integer(11), idSalaFK integer(11))
BEGIN
  UPDATE `estartho_bdunp`.`Reserva`
    SET 
`dataHora`= dataHora,
`idProfessorFK`= idProfessorFK,
`idSalaFK`= idSalaFK
WHERE `estartho_bdunp`.`Reserva`.`idReserva`=idReserva;
END$$

DELIMITER ; 

-- ------------------------------------------------------
-- procedure sp_deletarReserva
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_deletarReserva`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_deletarReserva`(idReserva integer(11))
BEGIN
DELETE FROM `estartho_bdunp`.`Reserva`
WHERE `estartho_bdunp`.`Reserva`.`idReserva` = idReserva;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_listarReserva
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_listarReserva`;
ELIMITER $$JH
USE `estartho_bdunp`$$

CREATE PROCEDURE `sp_listarReserva`()
BEGIN
SELECT * FROM `estartho_bdunp`.`Reserva`;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_inserirDefesa
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_inserirDefesa`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_inserirDefesa`(data date, idTCCFK integer(11), idReservaFK INT(11))
BEGIN
  INSERT INTO `estartho_bdunp`.`Defesa`
(`data`,
`idTCCFK`,
`idReservaFK`
)
VALUES
(data, idTCCFK, idReservaFK);
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_alterarDefesa
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_alterarDefesa`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_alterarDefesa` (idDefesa integer(11), data date, idTCCFK integer(11), idReservaFK INT(11))
BEGIN
  UPDATE `estartho_bdunp`.`Defesa`
    SET 
`data`= data,
`idTCCFK`= idTCCFK,
`idReservaFK`= idReservaFK
WHERE `estartho_bdunp`.`Defesa`.`idDefesa`=idDefesa;
END$$

DELIMITER ; 

-- ------------------------------------------------------
-- procedure sp_deletarDefesa
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_deletarDefesa`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_deletarDefesa`(idDefesa integer(11))
BEGIN
DELETE FROM `estartho_bdunp`.`Defesa`
WHERE `estartho_bdunp`.`Defesa`.`idDefesa` = idDefesa;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_listarDefesa
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_listarDefesa`;

DELIMITER $$
USE `estartho_bdunp`$$

CREATE PROCEDURE `sp_listarDefesa`()
BEGIN
SELECT * FROM `estartho_bdunp`.`Defesa`;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_inserirErros
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_inserirErros`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_inserirErros`(nomeErro varchar(50), categoria varchar(100))
BEGIN
  INSERT INTO `estartho_bdunp`.`Erros`
(`nomeErro`,
`categoria`
)
VALUES
(nomeErro, categoria);
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_alterarErros
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_alterarErros`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_alterarErros` (idErros integer(11),nomeErro varchar(50), categoria varchar(100))
BEGIN
  UPDATE `estartho_bdunp`.`Erros`
    SET 
`nomeErro`= nomeErro,
`categoria`= categoria
WHERE `estartho_bdunp`.`Erros`.`idErros`=idErros;
END$$

DELIMITER ; 

-- ------------------------------------------------------
-- procedure sp_deletarErros
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_deletarErros`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_deletarErros`(idErros integer(11))
BEGIN
DELETE FROM `estartho_bdunp`.`Erros`
WHERE `estartho_bdunp`.`Erros`.`idErros` = idErros;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_listarErros
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_listarErros`;

DELIMITER $$
USE `estartho_bdunp`$$

CREATE PROCEDURE `sp_listarErros`()
BEGIN
SELECT * FROM `estartho_bdunp`.`Erros`;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_inserirErrosTCC
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_inserirErrosTCC`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_inserirErrosTCC`(idTCCFK integer(11), idErrosFK integer(11))
BEGIN
  INSERT INTO `estartho_bdunp`.`ErrosTCC`
(`idTCCFK`,
`idErrosFK`
)
VALUES
(idTCCFK, idErrosFK);
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_alterarErrosTCC
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_alterarErrosTCC`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_alterarErrosTCC` (idErrosTCC integer(11), idTCCFK integer(11), idErrosFK integer(11))
BEGIN
  UPDATE `estartho_bdunp`.`ErrosTCC`
    SET 
`idTCCFK`= idTCCFK,
`idErrosFK`= idErrosFK
WHERE `estartho_bdunp`.`ErrosTCC`.`idErrosTCC`=idErrosTCC;
END$$

DELIMITER ; 

-- ------------------------------------------------------
-- procedure sp_deletarErrosTCC
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_deletarErrosTCC`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_deletarErrosTCC`(idErrosTCC integer(11))
BEGIN
DELETE FROM `estartho_bdunp`.`ErrosTCC`
WHERE `estartho_bdunp`.`ErrosTCC`.`idErrosTCC` = idErrosTCC;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_listarErrosTCC
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_listarErrosTCC`;

DELIMITER $$
USE `estartho_bdunp`$$

CREATE PROCEDURE `sp_listarErrosTCC`()
BEGIN
SELECT * FROM `estartho_bdunp`.`ErrosTCC`;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_inserirEvento
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_inserirEvento`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_inserirEvento`(nome varchar(50), dataHora datetime, local varchar(100), idProfessorFK integer(11), idCursoFK integer(11))
BEGIN
  INSERT INTO `estartho_bdunp`.`Evento`
(`nome`,
`dataHora`,
`local`,
`idProfessorFK`,
`idCursoFK`
)
VALUES
(nome, dataHora, local, idProfessorFK, idCursoFK);
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_alterarEvento
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_alterarEvento`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_alterarEvento` (idEvento integer(11), nome varchar(50), dataHora datetime, local varchar(100), idProfessorFK integer(11), idCursoFK integer(11))
BEGIN
  UPDATE `estartho_bdunp`.`Evento`
    SET 
`nome`= nome,
`dataHora`= dataHora,
`local`= local,
`idProfessorFK`= idProfessorFK,
`idCursoFK`= idCursoFK 
WHERE `estartho_bdunp`.`Evento`.`idEvento`=idEvento;
END$$

DELIMITER ; 

-- ------------------------------------------------------
-- procedure sp_deletarEvento
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_deletarEvento`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_deletarEvento`(idEvento integer(11))
BEGIN
DELETE FROM `estartho_bdunp`.`Evento`
WHERE `estartho_bdunp`.`Evento`.`idEvento` = idEvento;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_listarEvento
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_listarEvento`;

DELIMITER $$
USE `estartho_bdunp`$$

CREATE PROCEDURE `sp_listarEvento`()
BEGIN
SELECT * FROM `estartho_bdunp`.`Evento`;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_inserirRelatorio
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_inserirRelatorio`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_inserirRelatorio`(apresentacaoNota FLOAT, fundamentacaoNota FLOAT, desenvolvimentoNota FLOAT, resultadosNota FLOAT, notaFinal FLOAT, 
  TipoRelatorio varchar(50), apresentacaoComentario varchar(250), fundamentacaoComentario varchar(250), desenvolvimentoComentario varchar(250), 
  resultadosComentario varchar(250), idTCCFK integer(11))
BEGIN
  INSERT INTO `estartho_bdunp`.`Relatorio`
(`apresentacaoNota`,
`fundamentacaoNota`,
`desenvolvimentoNota`,
`resultadosNota`,
`notaFinal`,
`TipoRelatorio`, 
`apresentacaoComentario`,
`fundamentacaoComentario`,
`desenvolvimentoComentario`,
`resultadosComentario`,
`idTCCFK`
)
VALUES
(apresentacaoNota, fundamentacaoNota, desenvolvimentoNota, resultadosNota, notaFinal, TipoRelatorio, apresentacaoComentario, fundamentacaoComentario, desenvolvimentoComentario, resultadosComentario, idTCCFK);
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_alterarRelatorio
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_alterarRelatorio`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_alterarRelatorio` (idRelatorio integer(11), apresentacaoNota FLOAT, fundamentacaoNota FLOAT, desenvolvimentoNota FLOAT, resultadosNota FLOAT, notaFinal FLOAT, 
  TipoRelatorio varchar(50), apresentacaoComentario varchar(250), fundamentacaoComentario varchar(250), desenvolvimentoComentario varchar(250), 
  resultadosComentario varchar(250), idTCCFK integer(11))
BEGIN
  UPDATE `estartho_bdunp`.`Relatorio`
    SET 
`apresentacaoNota`= apresentacaoNota,
`fundamentacaoNota`= fundamentacaoNota,
`desenvolvimentoNota`= desenvolvimentoNota,
`resultadosNota`= resultadosNota,
`notaFinal`= notaFinal,
`TipoRelatorio`= TipoRelatorio, 
`apresentacaoComentario`= apresentacaoComentario,
`fundamentacaoComentario`= fundamentacaoComentario,
`desenvolvimentoComentario`= desenvolvimentoComentario,
`resultadosComentario`= resultadosComentario,
`idTCCFK`= idTCCFK
WHERE `estartho_bdunp`.`Relatorio`.`idRelatorio`=idRelatorio;
END$$

DELIMITER ; 

-- ------------------------------------------------------
-- procedure sp_deletarRelatorio
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_deletarRelatorio`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_deletarRelatorio`(idRelatorio integer(11))
BEGIN
DELETE FROM `estartho_bdunp`.`Relatorio`
WHERE `estartho_bdunp`.`Relatorio`.`idRelatorio` = idRelatorio;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_listarRelatorio
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_listarRelatorio`;

DELIMITER $$
USE `estartho_bdunp`$$

CREATE PROCEDURE `sp_listarRelatorio`()
BEGIN
SELECT * FROM `estartho_bdunp`.`Relatorio`;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_inserirAlunoDefesa
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_inserirAlunoDefesa`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_inserirAlunoDefesa`(notaPostura FLOAT, notaComunicacao FLOAT, notaClareza FLOAT, notaDominio FLOAT, idAluno integer(11), notaFinal FLOAT, 
 posturaComentario varchar(200), comunicacaoComentario varchar(45), clarezaComentario varchar(45), dominioComentario varchar(45), idDefesa integer(11))
BEGIN
  INSERT INTO `estartho_bdunp`.`AlunoDefesa`
(`notaPostura`,
`notaComunicacao`,
`notaClareza`,
`notaDominio`,
`idAluno`,
`notaFinal`,
`posturaComentario`,
`comunicacaoComentario`,
`clarezaComentario`,
`dominioComentario`,
`idDefesa`
)
VALUES
(notaPostura, notaComunicacao, notaClareza, notaDominio, idAluno, notaFinal, posturaComentario, comunicacaoComentario, clarezaComentario, dominioComentario, idDefesa);
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_alterarAlunoDefesa
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_alterarAlunoDefesa`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_alterarAlunoDefesa` (notaPostura FLOAT, notaComunicacao FLOAT, notaClareza FLOAT, notaDominio FLOAT, idAluno integer(11), notaFinal FLOAT, 
 posturaComentario varchar(200), comunicacaoComentario varchar(45), clarezaComentario varchar(45), dominioComentario varchar(45), idDefesa integer(11))

BEGIN
  UPDATE `estartho_bdunp`.`AlunoDefesa`
    SET 
`notaPostura`= notaPostura,
`notaComunicacao`= notaComunicacao,
`notaClareza`= notaClareza,
`notaDominio`= notaDominio,
`idAluno`= idAluno,
`notaFinal`= notaFinal,
`posturaComentario`= posturaComentario,
`comunicacaoComentario`= comunicacaoComentario,
`clarezaComentario`= clarezaComentario,
`dominioComentario`= dominioComentario,
`idDefesa`= idDefesa
WHERE `estartho_bdunp`.`AlunoDefesa`.`idTCC`=idTCC;
END$$

DELIMITER ; 


-- ------------------------------------------------------
-- procedure sp_
-- ------------------------------------------------------



-----------------------------------

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- Teste de Procedures

-- call sp_inserirAluno('Aluno teste', '123456789', 'aluno@teste.com', 'aluno.Teste', '123456', 3);
-- call sp_listarAluno();
-- call sp_buscarAlunoID(1);
-- call sp_deletarAluno(1);
